version: '3.8'

networks:
  frontend:
    # Rede para exposição externa (API Gateway)
  database:
    internal: true  
  message_bus:
    internal: true  

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7
    command: mongod --auth --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - database
    ports:
      - "${MONGO_PORT}:27017"
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - message_bus
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=${AUTH_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - MONGODB_URI=mongodb://auth_user:${MONGO_PASSWORD}@mongodb:27017/auth_db?authSource=auth_db
      - CORS_ORIGINS=http://localhost:${AUTH_SERVICE_PORT},http://localhost:${API_GATEWAY_PORT}
    networks:
      - database
      - frontend
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${AUTH_SERVICE_PORT}/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 15s

  order-service:
    build:
      context: ./order-service/order
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    networks:
      - database
      - message_bus
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  tracking-service:
    build:
      context: ./tracking-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=${TRACKING_SERVICE_PORT}
      - MONGODB_URI=mongodb://tracking_user:${MONGO_PASSWORD}@mongodb:27017/tracking_db?authSource=tracking_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    networks:
      - database
      - message_bus
      - frontend
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${TRACKING_SERVICE_PORT}/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 15s

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - AUTH_SERVICE_URL=http://auth-service:${AUTH_SERVICE_PORT}
      - ORDER_SERVICE_URL=http://order-service:${ORDER_SERVICE_PORT}
      - TRACKING_SERVICE_URL=http://tracking-service:${TRACKING_SERVICE_PORT}
    networks:
      - frontend
    ports:
      - "${API_GATEWAY_PORT}:8000"
    depends_on:
      - auth-service
      - order-service
      - tracking-service

volumes:
  postgres_data:
  mongodb_data: